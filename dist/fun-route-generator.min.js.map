{"version":3,"file":"fun-route-generator.min.js","mappings":"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","sources":["webpack://FunRouteGenerator/webpack/universalModuleDefinition","webpack://FunRouteGenerator/./fun-route-generator.js","webpack://FunRouteGenerator/webpack/bootstrap","webpack://FunRouteGenerator/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FunRouteGenerator\"] = factory();\n\telse\n\t\troot[\"FunRouteGenerator\"] = factory();\n})(this, () => {\nreturn ","// 浏览器兼容的 HTTP 客户端\r\nconst httpClient = {\r\n    async post(url, data, config = {}) {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                ...config.headers\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const error = new Error(`HTTP ${response.status}`);\r\n            error.response = {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                data: await response.json().catch(() => ({ message: response.statusText }))\r\n            };\r\n            throw error;\r\n        }\r\n        \r\n        return {\r\n            data: await response.json()\r\n        };\r\n    },\r\n    \r\n    async get(url, config = {}) {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: config.headers || {}\r\n        });\r\n        \r\n        if (!response.ok) {\r\n            const error = new Error(`HTTP ${response.status}`);\r\n            error.response = {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                data: await response.json().catch(() => ({ message: response.statusText }))\r\n            };\r\n            throw error;\r\n        }\r\n        \r\n        return {\r\n            data: await response.json()\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * 趣味路线生成器库\r\n * 提供简洁的 API 接口用于生成有趣的驾驶路线\r\n */\r\nclass FunRouteGenerator {\r\n    constructor(options = {}) {\r\n        this.config = {\r\n            apiKey: options.apiKey || '',\r\n            host: options.host || 'https://graphhopper.com/api/1',\r\n            timeout: options.timeout || 15000,\r\n            profile: options.profile || 'car',\r\n            locale: options.locale || 'en',\r\n            instructions: options.instructions !== false,\r\n            points_encoded: options.points_encoded !== false,\r\n            elevation: options.elevation || false,\r\n            // 趣味路线特有参数\r\n            distance_range: [50000, 500000], // 50km - 500km (单位：米)\r\n            curve_level: \"medium\", // 弯道等级: \"low\", \"medium\", \"high\"\r\n            route_type: \"roundtrip\", // \"roundtrip\" 或 \"point_to_point\"\r\n            ...options\r\n        };\r\n        \r\n        if (!this.config.apiKey) {\r\n            throw new Error('GraphHopper API key is required');\r\n        }\r\n        \r\n        // 弯道等级配置\r\n        this.curveSettings = {\r\n            \"low\": {\r\n                avoid_highways: false,\r\n                prefer_scenic: false,\r\n                detour_factor: 1.1\r\n            },\r\n            \"medium\": {\r\n                avoid_highways: true,\r\n                prefer_scenic: true,\r\n                detour_factor: 1.3\r\n            },\r\n            \"high\": {\r\n                avoid_highways: true,\r\n                prefer_scenic: true,\r\n                detour_factor: 1.6\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 生成趣味路线\r\n     * @param {Object} reqArgs - 请求参数\r\n     * @param {Array} reqArgs.start_point - 起始点 [lng, lat]\r\n     * @param {Array} reqArgs.end_point - 终点 [lng, lat] (可选，roundtrip时不需要)\r\n     * @param {number} reqArgs.target_distance - 目标距离(米)\r\n     * @param {string} reqArgs.curve_level - 弯道等级\r\n     * @param {string} reqArgs.route_type - 路线类型\r\n     * @param {number} reqArgs.start_bearing - 起始方向(度) (可选)\r\n     */\r\n    async generateFunRoute(reqArgs) {\r\n        // 应用默认值\r\n        const params = {\r\n            profile: this.config.profile,\r\n            locale: this.config.locale,\r\n            points_encoded: this.config.points_encoded,\r\n            instructions: this.config.instructions,\r\n            elevation: this.config.elevation,\r\n            curve_level: this.config.curve_level,\r\n            route_type: this.config.route_type,\r\n            ...reqArgs\r\n        };\r\n        \r\n        // 验证参数\r\n        if (!params.start_point || !Array.isArray(params.start_point)) {\r\n            throw new Error(\"起始点参数无效\");\r\n        }\r\n        \r\n        if (params.route_type === \"point_to_point\" && (!params.end_point || !Array.isArray(params.end_point))) {\r\n            throw new Error(\"点对点路线需要提供终点\");\r\n        }\r\n        \r\n        if (params.target_distance < 50000 || params.target_distance > 500000) {\r\n            throw new Error(\"目标距离必须在50-500km之间\");\r\n        }\r\n        \r\n        if (params.route_type === \"roundtrip\") {\r\n            return this._generateRoundTrip(params);\r\n        } else {\r\n            return this._generatePointToPoint(params);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 生成环形趣味路线\r\n     * @param {Object} options - 路线配置选项\r\n     * @param {Array} options.startPoint - 起始点 [lat, lng]\r\n     * @param {number} options.distance - 目标距离 (km)\r\n     * @param {string} options.curveLevel - 弯道等级: 'low', 'medium', 'high'\r\n     * @param {number} options.startBearing - 起始方向 (度)\r\n     * @returns {Promise} 路线数据\r\n     */\r\n    async generateRoundTrip(options) {\r\n        const { startPoint, distance, curveLevel = 'medium', startBearing = 0 } = options;\r\n        \r\n        if (!startPoint || !Array.isArray(startPoint) || startPoint.length !== 2) {\r\n            throw new Error('startPoint must be an array of [lat, lng]');\r\n        }\r\n        \r\n        if (!distance || distance < 50 || distance > 500) {\r\n            throw new Error('distance must be between 50 and 500 km');\r\n        }\r\n\r\n        // 转换为新API格式\r\n        return this.generateFunRoute({\r\n            start_point: [startPoint[1], startPoint[0]], // 转换为 [lng, lat]\r\n            target_distance: distance * 1000, // 转换为米\r\n            curve_level: curveLevel,\r\n            route_type: \"roundtrip\",\r\n            start_bearing: startBearing\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 生成点对点趣味路线\r\n     * @param {Object} options - 路线配置选项\r\n     * @param {Array} options.startPoint - 起始点 [lat, lng]\r\n     * @param {Array} options.endPoint - 终点 [lat, lng]\r\n     * @param {string} options.curveLevel - 弯道等级: 'low', 'medium', 'high'\r\n     * @param {number} options.targetDistance - 目标距离 (km, 可选)\r\n     * @returns {Promise} 路线数据\r\n     */\r\n    async generatePointToPoint(options) {\r\n        const { startPoint, endPoint, curveLevel = 'medium', targetDistance } = options;\r\n        \r\n        if (!startPoint || !Array.isArray(startPoint) || startPoint.length !== 2) {\r\n            throw new Error('startPoint must be an array of [lat, lng]');\r\n        }\r\n        \r\n        if (!endPoint || !Array.isArray(endPoint) || endPoint.length !== 2) {\r\n            throw new Error('endPoint must be an array of [lat, lng]');\r\n        }\r\n\r\n        let routePoints = [startPoint, endPoint];\r\n        \r\n        // 如果指定了目标距离，添加绕行点\r\n        if (targetDistance) {\r\n            if (targetDistance < 50 || targetDistance > 500) {\r\n                throw new Error('targetDistance must be between 50 and 500 km');\r\n            }\r\n            \r\n            const detourPoints = this._generateDetourPoints(\r\n                startPoint, endPoint, targetDistance * 1000, curveLevel\r\n            );\r\n            routePoints = [startPoint, ...detourPoints, endPoint];\r\n        }\r\n        \r\n        return this._requestRoute(routePoints, curveLevel);\r\n    }\r\n\r\n    /**\r\n     * 生成环形路线\r\n     */\r\n    async _generateRoundTrip(reqArgs) {\r\n        const startPoint = reqArgs.start_point;\r\n        const targetDistance = reqArgs.target_distance;\r\n        const curveLevel = reqArgs.curve_level || \"medium\";\r\n        const startBearing = reqArgs.start_bearing || 0;\r\n        \r\n        // 生成中间点来创建环形路线\r\n        const intermediatePoints = this._generateIntermediatePoints(\r\n            startPoint, \r\n            targetDistance, \r\n            curveLevel,\r\n            startBearing\r\n        );\r\n        \r\n        // 构建路线点数组 (起点 -> 中间点们 -> 起点)\r\n        const routePoints = [startPoint, ...intermediatePoints, startPoint];\r\n        \r\n        const routeRequest = {\r\n            points: routePoints,\r\n            profile: reqArgs.profile,\r\n            instructions: reqArgs.instructions,\r\n            points_encoded: reqArgs.points_encoded,\r\n            elevation: reqArgs.elevation,\r\n            locale: reqArgs.locale\r\n        };\r\n        \r\n        // 应用弯道设置\r\n        this._applyCurveSettings(routeRequest, curveLevel);\r\n        \r\n        const result = await this._doRouteRequest(routeRequest);\r\n        result.route_info = {\r\n            type: \"roundtrip\",\r\n            target_distance: targetDistance,\r\n            actual_distance: result.paths[0].distance,\r\n            curve_level: curveLevel,\r\n            start_bearing: startBearing\r\n        };\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * 生成点对点路线\r\n     */\r\n    async _generatePointToPoint(reqArgs) {\r\n        const startPoint = reqArgs.start_point;\r\n        const endPoint = reqArgs.end_point;\r\n        const targetDistance = reqArgs.target_distance;\r\n        const curveLevel = reqArgs.curve_level || \"medium\";\r\n        \r\n        // 首先计算直线距离\r\n        const directDistance = this._calculateDistance(startPoint, endPoint);\r\n        \r\n        if (directDistance > targetDistance) {\r\n            throw new Error(\"起终点直线距离超过目标距离\");\r\n        }\r\n        \r\n        // 生成中间点来增加路线长度和弯道\r\n        const intermediatePoints = this._generateDetourPoints(\r\n            startPoint, \r\n            endPoint, \r\n            targetDistance, \r\n            curveLevel\r\n        );\r\n        \r\n        const routePoints = [startPoint, ...intermediatePoints, endPoint];\r\n        \r\n        const routeRequest = {\r\n            points: routePoints,\r\n            profile: reqArgs.profile,\r\n            instructions: reqArgs.instructions,\r\n            points_encoded: reqArgs.points_encoded,\r\n            elevation: reqArgs.elevation,\r\n            locale: reqArgs.locale\r\n        };\r\n        \r\n        // 应用弯道设置\r\n        this._applyCurveSettings(routeRequest, curveLevel);\r\n        \r\n        const result = await this._doRouteRequest(routeRequest);\r\n        result.route_info = {\r\n            type: \"point_to_point\",\r\n            target_distance: targetDistance,\r\n            actual_distance: result.paths[0].distance,\r\n            direct_distance: directDistance,\r\n            curve_level: curveLevel\r\n        };\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * 为环形路线生成中间点\r\n     */\r\n    _generateIntermediatePoints(startPoint, targetDistance, curveLevel, startBearing) {\r\n        const points = [];\r\n        const numPoints = curveLevel === \"high\" ? 3 : (curveLevel === \"medium\" ? 2 : 1);\r\n        const radiusKm = (targetDistance / 1000) / (2 * Math.PI); // 估算半径\r\n        \r\n        for (let i = 0; i < numPoints; i++) {\r\n            const angle = startBearing + (360 / numPoints) * (i + 1);\r\n            const point = this._calculatePointAtDistance(startPoint, radiusKm * 1000, angle);\r\n            \r\n            // 添加一些随机偏移来增加趣味性\r\n            const randomOffset = (Math.random() - 0.5) * 0.01; // 约1km的随机偏移\r\n            point[0] += randomOffset;\r\n            point[1] += randomOffset;\r\n            \r\n            points.push(point);\r\n        }\r\n        \r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * 为点对点路线生成绕行点\r\n     */\r\n    _generateDetourPoints(startPoint, endPoint, targetDistance, curveLevel) {\r\n        const points = [];\r\n        const directDistance = this._calculateDistance(startPoint, endPoint);\r\n        const extraDistance = targetDistance - directDistance;\r\n        \r\n        if (extraDistance <= 0) return points;\r\n        \r\n        const numDetours = curveLevel === \"high\" ? 2 : (curveLevel === \"medium\" ? 1 : 1);\r\n        \r\n        for (let i = 0; i < numDetours; i++) {\r\n            const progress = (i + 1) / (numDetours + 1);\r\n            const midPoint = [\r\n                startPoint[0] + (endPoint[0] - startPoint[0]) * progress,\r\n                startPoint[1] + (endPoint[1] - startPoint[1]) * progress\r\n            ];\r\n            \r\n            // 垂直于主方向的偏移\r\n            const bearing = this._calculateBearing(startPoint, endPoint);\r\n            const perpBearing = bearing + 90 + (Math.random() - 0.5) * 60; // 添加随机性\r\n            const offsetDistance = (extraDistance / numDetours) * 0.3; // 偏移距离\r\n            \r\n            const detourPoint = this._calculatePointAtDistance(midPoint, offsetDistance, perpBearing);\r\n            points.push(detourPoint);\r\n        }\r\n        \r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * 执行路线请求\r\n     */\r\n    async _doRouteRequest(routeRequest) {\r\n        const url = `${this.config.host}/route?key=${this.config.apiKey}`;\r\n        \r\n        try {\r\n            const response = await httpClient.post(url, routeRequest, {\r\n                headers: {'Content-Type': 'application/json'}\r\n            });\r\n            \r\n            const data = response.data;\r\n            \r\n            if (data.paths) {\r\n                for (let i = 0; i < data.paths.length; i++) {\r\n                    const path = data.paths[i];\r\n                    // 转换编码的路径点\r\n                    if (path.points_encoded && typeof path.points === 'string') {\r\n                        // 简化的解码逻辑，实际项目中可能需要更完整的实现\r\n                        path.points = {\r\n                            \"type\": \"LineString\", \r\n                            \"coordinates\": this._decodePolyline(path.points)\r\n                        };\r\n                    }\r\n                    \r\n                    if (path.snapped_waypoints && typeof path.snapped_waypoints === 'string') {\r\n                        path.snapped_waypoints = {\r\n                            \"type\": \"LineString\", \r\n                            \"coordinates\": this._decodePolyline(path.snapped_waypoints)\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return data;\r\n        } catch (error) {\r\n            if (error.response) {\r\n                throw new Error(`GraphHopper API Error: ${error.response.status} - ${error.response.data.message || error.response.statusText}`);\r\n            } else if (error.request) {\r\n                throw new Error('Network Error: Unable to reach GraphHopper API');\r\n            } else {\r\n                throw new Error(`Request Error: ${error.message}`);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 发送路线请求到 GraphHopper API\r\n     */\r\n    async _requestRoute(points, curveLevel) {\r\n        // 转换坐标格式：从 [lat, lng] 转换为 GraphHopper API 期望的 [lng, lat]\r\n        const convertedPoints = points.map(point => [point[1], point[0]]);\r\n        \r\n        const routeRequest = {\r\n            points: convertedPoints,\r\n            profile: this.config.profile,\r\n            instructions: true,\r\n            points_encoded: true,\r\n            elevation: false,\r\n            locale: this.config.locale\r\n        };\r\n        \r\n        // 应用弯道设置\r\n        this._applyCurveSettings(routeRequest, curveLevel);\r\n        \r\n        return this._doRouteRequest(routeRequest);\r\n    }\r\n    \r\n    /**\r\n     * 简化的 Polyline 解码\r\n     */\r\n    _decodePolyline(encoded) {\r\n        // 这是一个简化版本，实际使用中建议使用专门的polyline解码库\r\n        const coordinates = [];\r\n        let index = 0, lat = 0, lng = 0;\r\n        \r\n        while (index < encoded.length) {\r\n            let b, shift = 0, result = 0;\r\n            do {\r\n                b = encoded.charCodeAt(index++) - 63;\r\n                result |= (b & 0x1f) << shift;\r\n                shift += 5;\r\n            } while (b >= 0x20);\r\n            const dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));\r\n            lat += dlat;\r\n            \r\n            shift = 0;\r\n            result = 0;\r\n            do {\r\n                b = encoded.charCodeAt(index++) - 63;\r\n                result |= (b & 0x1f) << shift;\r\n                shift += 5;\r\n            } while (b >= 0x20);\r\n            const dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));\r\n            lng += dlng;\r\n            \r\n            coordinates.push([lng / 1e5, lat / 1e5]);\r\n        }\r\n        \r\n        return coordinates;\r\n    }\r\n\r\n    /**\r\n     * 应用弯道设置到路线请求\r\n     */\r\n    _applyCurveSettings(routeRequest, curveLevel) {\r\n        const settings = this.curveSettings[curveLevel] || this.curveSettings[\"medium\"];\r\n        \r\n        // 使用免费API支持的基本参数\r\n        if (settings.avoid_highways) {\r\n            routeRequest.avoid = \"motorway\";\r\n        }\r\n        \r\n        // 设置路由类型偏好\r\n        if (settings.prefer_scenic) {\r\n            routeRequest.weighting = \"shortest\"; // 使用最短路径可能更有趣\r\n        } else {\r\n            routeRequest.weighting = \"fastest\";\r\n        }\r\n        \r\n        return routeRequest;\r\n    }\r\n\r\n    /**\r\n     * 计算两点间距离（米）\r\n     */\r\n    _calculateDistance(point1, point2) {\r\n        const R = 6371000; // 地球半径(米)\r\n        const lat1Rad = point1[1] * Math.PI / 180;\r\n        const lat2Rad = point2[1] * Math.PI / 180;\r\n        const deltaLatRad = (point2[1] - point1[1]) * Math.PI / 180;\r\n        const deltaLngRad = (point2[0] - point1[0]) * Math.PI / 180;\r\n\r\n        const a = Math.sin(deltaLatRad/2) * Math.sin(deltaLatRad/2) +\r\n                Math.cos(lat1Rad) * Math.cos(lat2Rad) *\r\n                Math.sin(deltaLngRad/2) * Math.sin(deltaLngRad/2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n\r\n        return R * c;\r\n    }\r\n    \r\n    /**\r\n     * 计算方位角\r\n     */\r\n    _calculateBearing(point1, point2) {\r\n        const lat1Rad = point1[1] * Math.PI / 180;\r\n        const lat2Rad = point2[1] * Math.PI / 180;\r\n        const deltaLngRad = (point2[0] - point1[0]) * Math.PI / 180;\r\n        \r\n        const y = Math.sin(deltaLngRad) * Math.cos(lat2Rad);\r\n        const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) - Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(deltaLngRad);\r\n        \r\n        const bearing = Math.atan2(y, x) * 180 / Math.PI;\r\n        return (bearing + 360) % 360;\r\n    }\r\n    \r\n    /**\r\n     * 根据距离和方位角计算新点\r\n     */\r\n    _calculatePointAtDistance(point, distance, bearing) {\r\n        const R = 6371000; // 地球半径(米)\r\n        const lat1Rad = point[1] * Math.PI / 180;\r\n        const lng1Rad = point[0] * Math.PI / 180;\r\n        const bearingRad = bearing * Math.PI / 180;\r\n        \r\n        const lat2Rad = Math.asin(Math.sin(lat1Rad) * Math.cos(distance/R) +\r\n                               Math.cos(lat1Rad) * Math.sin(distance/R) * Math.cos(bearingRad));\r\n        \r\n        const lng2Rad = lng1Rad + Math.atan2(Math.sin(bearingRad) * Math.sin(distance/R) * Math.cos(lat1Rad),\r\n                                          Math.cos(distance/R) - Math.sin(lat1Rad) * Math.sin(lat2Rad));\r\n        \r\n        return [lng2Rad * 180 / Math.PI, lat2Rad * 180 / Math.PI];\r\n    }\r\n}\r\n\r\n// 支持多种模块系统\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = FunRouteGenerator;\r\n} else if (typeof window !== 'undefined') {\r\n    window.FunRouteGenerator = FunRouteGenerator;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(594);\n"],"names":["root","factory","exports","module","define","amd","this","e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_typeof","toPrimitive","String","_toPrimitive","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","_next","_throw","httpClient","url","data","_arguments","_callee","config","response","error","_t","_t2","_t3","_t4","_context","undefined","fetch","method","headers","body","JSON","stringify","ok","Error","concat","status","statusText","json","catch","message","FunRouteGenerator","options","_classCallCheck","apiKey","host","timeout","profile","locale","instructions","points_encoded","elevation","distance_range","curve_level","route_type","curveSettings","avoid_highways","prefer_scenic","detour_factor","key","_generateFunRoute","_callee3","reqArgs","params","_context3","start_point","Array","isArray","end_point","target_distance","_generateRoundTrip","_generatePointToPoint","_x","_generateRoundTrip2","_callee4","startPoint","distance","_options$curveLevel","curveLevel","_options$startBearing","startBearing","_context4","generateFunRoute","start_bearing","_x2","_generatePointToPoint2","_callee5","endPoint","_options$curveLevel2","targetDistance","routePoints","detourPoints","_context5","_generateDetourPoints","_toConsumableArray","_requestRoute","_x3","_generateRoundTrip3","_callee6","intermediatePoints","routeRequest","result","_context6","_generateIntermediatePoints","points","_applyCurveSettings","_doRouteRequest","route_info","type","actual_distance","paths","_x4","_generatePointToPoint3","_callee7","directDistance","_context7","_calculateDistance","direct_distance","_x5","numPoints","radiusKm","Math","PI","angle","point","_calculatePointAtDistance","randomOffset","random","extraDistance","numDetours","progress","midPoint","perpBearing","_calculateBearing","offsetDistance","detourPoint","_doRouteRequest2","_callee8","path","_t9","_context8","_decodePolyline","snapped_waypoints","request","_x6","_requestRoute2","_callee9","convertedPoints","_context9","map","_x7","_x8","encoded","coordinates","index","lat","lng","b","shift","charCodeAt","settings","avoid","weighting","point1","point2","lat1Rad","lat2Rad","deltaLatRad","deltaLngRad","sin","cos","atan2","sqrt","x","bearing","R","lng1Rad","bearingRad","asin","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}